@page "/profile"
@using QMS.Data.Entities
@using System.Security.Claims
@inject HttpClient Http
@inject IJSRuntime js
@using QMS.Models
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@using System.Text.Json;

<h3>ข้อมูลส่วนตัวของคุณ</h3>

<style>
    .card i {
        color: #007bff; /* เปลี่ยนสีของไอคอน */
        display: block; /* แสดงเป็นบล็อก */
        text-align: center; /* จัดตำแหน่งกลาง */
    }
</style>

@if (user == null)
{
    <p>กำลังโหลดข้อมูล...</p>
}
else
{
    <div class="card" style="width: 18rem;">
        <i class="fas fa-user-circle" style="font-size: 100px; margin: 20px;"></i>
        <div class="card-body">
            <p class="card-text"><strong>รหัสผู้ใช้:</strong> @user.user_id </p>
            <p class="card-text"><strong>หมายเลขบัตรประชาชน:</strong> @user.citizen_id_number</p>
            <p class="card-text"><strong>ชื่อ:</strong> @user.firstname @user.lastname</p>
            <p class="card-text"><strong>เบอร์โทรศัพท์:</strong> @user.phone_number</p>
            <p class="card-text"><strong>อีเมล:</strong> @user.user_email</p>
        </div>
    </div>
}

@code {
    private Models.UserModel user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var token = await js.InvokeAsync<string>("localStorage.getItem", "jwtToken");

                if (!string.IsNullOrEmpty(token))
                {

                    var userId = JwtHelper.GetUserIdFromToken(token, Configuration);

                    if (userId.HasValue)
                    {
                        // Set the Authorization header
                        Http.DefaultRequestHeaders.Authorization =
                            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                        // Fetch user profile data from API
                        var response = await Http.GetAsync($"https://localhost:44328/api/User?userId={userId.Value}");

                        if (response.IsSuccessStatusCode)
                        {
                            user = await response.Content.ReadFromJsonAsync<UserModel>();
                            StateHasChanged(); // Refresh the UI with the fetched data
                        }
                        else
                        {
                         

                            // Handle errors such as 404 or other status codes
                            await js.InvokeVoidAsync("localStorage.removeItem", "jwtToken");
                            Navigation.NavigateTo("/login");
                        }
                    }
                    else
                    {
                        await js.InvokeVoidAsync("localStorage.removeItem", "jwtToken");
                        Navigation.NavigateTo("/login");
                    }


                }
                else
                {
                    Navigation.NavigateTo("/login");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching user profile: {ex.Message}");
                await js.InvokeVoidAsync("localStorage.removeItem", "jwtToken");
                Navigation.NavigateTo("/login");
            }
        }
    }
}

